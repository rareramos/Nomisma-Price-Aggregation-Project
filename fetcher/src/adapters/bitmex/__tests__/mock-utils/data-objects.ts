import { getRandomNumber, getRandomString } from '../../../../utils/common';
import { ILiveTickDataEvent, ILiveTickData, ICfdScrapingData } from '../../../../types/adapters/bitmex';

export const symbolsList = [
  { symbol: 'XBT7D_U105', rootSymbol: 'XBT' },
  { symbol: 'XRPZ19', rootSymbol: 'XRP' },
  { symbol: 'BCHZ19', rootSymbol: 'BCH' },
  { symbol: 'ADAZ19', rootSymbol: 'ADA' },
  { symbol: 'EOSZ19', rootSymbol: 'EOS' },
  { symbol: 'TRXZ19', rootSymbol: 'TRX' },
  { symbol: 'XBTUSD', rootSymbol: 'XBT' },
  { symbol: 'XBT7D_D95', rootSymbol: 'XBT' },
  { symbol: 'XBTZ19', rootSymbol: 'XBT' },
  { symbol: 'XBTZ19', rootSymbol: 'XBT' },
  { symbol: 'ETHUSD', rootSymbol: 'ETH' },
  { symbol: 'ETHZ19', rootSymbol: 'ETH' },
  { symbol: 'LTCZ19', rootSymbol: 'LTC' },
];

export const tickDummyData = () : ILiveTickData => ({
  symbol: getRandomString(),
  rootSymbol: getRandomString(),
  state: getRandomString(),
  typ: getRandomString(),
  listing: getRandomString(),
  front: getRandomString(),
  expiry: getRandomString(),
  settle: getRandomString(),
  relistInterval: null,
  inverseLeg: getRandomString(),
  sellLeg: getRandomString(),
  buyLeg: getRandomString(),
  optionStrikePcnt: null,
  optionStrikeRound: null,
  optionStrikePrice: null,
  optionMultiplier: null,
  positionCurrency: getRandomString(),
  underlying: getRandomString(),
  quoteCurrency: getRandomString(),
  underlyingSymbol: getRandomString(),
  reference: getRandomString(),
  referenceSymbol: getRandomString(),
  calcInterval: null,
  publishInterval: null,
  publishTime: null,
  maxOrderQty: getRandomNumber(),
  maxPrice: getRandomNumber(),
  lotSize: getRandomNumber(),
  tickSize: getRandomNumber(),
  multiplier: getRandomNumber(),
  settlCurrency: getRandomString(),
  underlyingToPositionMultiplier: null,
  underlyingToSettleMultiplier: getRandomNumber(),
  quoteToSettleMultiplier: null,
  isQuanto: false,
  isInverse: true,
  initMargin: getRandomNumber(),
  maintMargin: getRandomNumber(),
  riskLimit: getRandomNumber(),
  riskStep: getRandomNumber(),
  limit: null,
  capped: false,
  taxed: true,
  deleverage: true,
  makerFee: getRandomNumber(),
  takerFee: getRandomNumber(),
  settlementFee: getRandomNumber(),
  insuranceFee: getRandomNumber(),
  fundingBaseSymbol: getRandomString(),
  fundingQuoteSymbol: getRandomString(),
  fundingPremiumSymbol: getRandomString(),
  fundingTimestamp: null,
  fundingInterval: null,
  fundingRate: null,
  indicativeFundingRate: null,
  rebalanceTimestamp: null,
  rebalanceInterval: null,
  openingTimestamp: getRandomString(),
  closingTimestamp: getRandomString(),
  sessionInterval: getRandomString(),
  prevClosePrice: getRandomNumber(),
  limitDownPrice: null,
  limitUpPrice: null,
  bankruptLimitDownPrice: null,
  bankruptLimitUpPrice: null,
  prevTotalVolume: getRandomNumber(),
  totalVolume: getRandomNumber(),
  volume: getRandomNumber(),
  volume24h: getRandomNumber(),
  prevTotalTurnover: getRandomNumber(),
  totalTurnover: getRandomNumber(),
  turnover: getRandomNumber(),
  turnover24h: getRandomNumber(),
  homeNotional24h: getRandomNumber(),
  foreignNotional24h: getRandomNumber(),
  prevPrice24h: getRandomNumber(),
  vwap: getRandomNumber(),
  highPrice: getRandomNumber(),
  lowPrice: getRandomNumber(),
  lastPrice: getRandomNumber(),
  lastPriceProtected: getRandomNumber(),
  lastTickDirection: getRandomString(),
  lastChangePcnt: getRandomNumber(),
  bidPrice: getRandomNumber(),
  midPrice: getRandomNumber(),
  askPrice: getRandomNumber(),
  impactBidPrice: getRandomNumber(),
  impactMidPrice: getRandomNumber(),
  impactAskPrice: getRandomNumber(),
  hasLiquidity: true,
  openInterest: getRandomNumber(),
  openValue: getRandomNumber(),
  fairMethod: getRandomString(),
  fairBasisRate: getRandomNumber(),
  fairBasis: getRandomNumber(),
  fairPrice: getRandomNumber(),
  markMethod: getRandomString(),
  markPrice: getRandomNumber(),
  indicativeTaxRate: getRandomNumber(),
  indicativeSettlePrice: getRandomNumber(),
  optionUnderlyingPrice: null,
  settledPrice: null,
  timestamp: getRandomString(),
});

export const getDummyLiveTickData = () : Array<ILiveTickData> => symbolsList.map(
  ({ symbol, rootSymbol } : {symbol : string; rootSymbol : string}) : ILiveTickData => {
    const result = {
      ...tickDummyData(), symbol, rootSymbol, serviceSymbol: symbol, underlying: symbol,
    };
    return result;
  },
);

export const getDummyLiveTickDataEvent = () : ILiveTickDataEvent => ({
  event: {
    table: 'instrument',
    action: 'partial',
    keys: ['symbol'],
    data: getDummyLiveTickData(),
  },
});

export const getCfdScrapingData = () : ICfdScrapingData => ({
  expiry: getRandomString(),
  epic: ['CFD'],
  serviceName: 'IG.com',
  bid: getRandomNumber(),
  offer: getRandomNumber(),
  fundingLong: getRandomNumber(),
  fundingShort: getRandomNumber(),
  margin: getRandomNumber(),
  guaranteedStop: true,
  guaranteedStopPremium: getRandomNumber(),
});
